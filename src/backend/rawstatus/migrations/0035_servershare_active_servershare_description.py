# Generated by Django 4.2.13 on 2025-04-11 13:39

from django.db import migrations, models

from jobs import jobs as jj
from rawstatus.models import UploadFileType as UFT



# TO DO:
# in stage w old db, first fix all the server/share combinations after migrating, dump that
# and load dump into prod!

# remove old jobs from queue so runner does not crash

def fake(a, s):
    pass


def fix_new_fk(a, s):
    SFL = a.get_model('rawstatus', 'StoredFileLoc')
    SFL.objects.filter(sfile__deleted=True).update(active=False)

    FJ = a.get_model('rawstatus', 'FileJob')
    x = FJ.objects.exclude(job__state__in=[*jj.JOBSTATES_WAIT, jj.Jobstates.ERROR, jj.Jobstates.REVOKING]).delete()
    for fj in FJ.objects.select_related('storedfile').all():
        fj.rawfile_id = fj.storedfile.rawfile_id
        fj.save()
    
    RF = a.get_model('rawstatus', 'RawFile')
    RF.objects.filter(storedfile__libraryfile__isnull=False).update(usetype=UFT.LIBRARY)
    RF.objects.filter(storedfile__userfile__isnull=False).update(usetype=UFT.USERFILE)
    RF.objects.filter(storedfile__analysisresultfile__isnull=False).update(usetype=UFT.ANALYSIS)
    RF.objects.filter(filejob__job__funcname='run_longit_qc_workflow').update(usetype=UFT.QC)


class Migration(migrations.Migration):

    dependencies = [
        ('rawstatus', '0034_remove_migrated_fields_sfloc'),
    ]

    operations = [
        migrations.AddField(
            model_name='servershare',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='servershare',
            name='description',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='servershare',
            name='has_rawdata',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='servershare',
            name='maxdays_data',
            field=models.IntegerField(default=0, help_text='How many days after inactive files aredeleted from the share, 0 means inifinite'),
        ),
        migrations.AlterField(
            model_name='servershare',
            name='share',
            field=models.TextField(help_text='Base path, e.g. /disk1/data/raw/projects'),
        ),

        migrations.AddField(
            model_name='storedfileloc',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='storedfileloc',
            name='purged',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='storedfileloc',
            name='last_date_used',
            field=models.DateTimeField(auto_now=True),
        ),

        migrations.AddField(
            model_name='fileserver',
            name='rsynckeyfile',
            field=models.TextField(blank=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fileserver',
            name='rsyncusername',
            field=models.TextField(blank=True),
            preserve_default=False,
        ),

        migrations.AddField(
            model_name='filejob',
            name='rawfile',
            field=models.ForeignKey(default=1000, on_delete=models.deletion.CASCADE, to='rawstatus.rawfile'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fileserver',
            name='active',
            field=models.BooleanField(default=True, help_text='Are we using this server?'),
        ),
        migrations.AddField(
            model_name='fileserver',
            name='can_backup',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='fileserver',
            name='can_rsync_remote',
            field=models.BooleanField(default=False, help_text='Does the server have rsync private keys for other servers (aka is some kind of controller)'),
        ),
        migrations.AddField(
            model_name='fileserver',
            name='is_analysis',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='fileserver',
            name='scratchdir',
            field=models.TextField(default='', help_text='For nextflow TMPDIR and stage if needed. Can be blank even for analysis servers'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rawfile',
            name='usetype',
            field=models.IntegerField(choices=[(1, 'Raw file'), (2, 'Analysis result'), (3, 'Shared file for all users'), (4, 'User upload'), (5, 'MS QC file')], default=1),
            preserve_default=False,
        ),

        migrations.RunPython(fix_new_fk, fake),

        migrations.AddField(
            model_name='servershare',
            name='function',
            field=models.IntegerField(default=1, choices=[(1, 'Raw data'), (2, 'Analysis results for user delivery, only 1 can exist'), (3, 'Reports on web server'), (4, 'File inflow and tmp storage'), (5, 'Library and user reference files'), (6, 'Analysis results local to analysis server')]),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='fileserver',
            name='fqdn',
            field=models.TextField(help_text='controller URL for rsync SSH'),
        ),
        migrations.AlterField(
            model_name='fileserver',
            name='uri',
            field=models.TextField(help_text='How users can find server'),
        ),
        migrations.AlterField(
            model_name='producer',
            name='client_id',
            field=models.TextField(unique=True),
        ),
        migrations.AlterField(
            model_name='servershare',
            name='max_security',
            field=models.IntegerField(choices=[(1, 'Not classified')]),
            #field=models.IntegerField(choices=[(1, 'Not classified'), (2, 'Personal data'), (3, 'Sensitive data')]),
        ),
        migrations.AlterField(
            model_name='uploadtoken',
            name='uploadtype',
            field=models.IntegerField(choices=[(1, 'Raw file'), (2, 'Analysis result'), (3, 'Shared file for all users'), (4, 'User upload'), (5, 'MS QC file')]),
        ),
        migrations.CreateModel(
            name='FileserverShare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('server', models.ForeignKey(on_delete=models.deletion.CASCADE, to='rawstatus.fileserver')),
                ('share', models.ForeignKey(on_delete=models.deletion.CASCADE, to='rawstatus.servershare')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('server', 'path'), name='uni_fspath')],
            },
        ),
    ]
